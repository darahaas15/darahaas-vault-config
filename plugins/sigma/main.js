/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SigmaPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var Token = class {
  constructor(type, lexeme, literal) {
    this.type = type;
    this.lexeme = lexeme;
    this.literal = literal;
  }
};
var Scanner = class {
  constructor(source) {
    this.tokens = [];
    this.start = 0;
    this.current = 0;
    this.error = "";
    this.source = source;
  }
  scanTokens() {
    while (!this.isAtEnd()) {
      this.start = this.current;
      this.scanToken();
    }
    this.tokens.push(new Token(14 /* End */, "", null));
    return this.tokens;
  }
  isAtEnd() {
    return this.current >= this.source.length;
  }
  isDigit(str) {
    if (str.length < 1)
      return false;
    const ch = str[0];
    return ch >= "0" && ch <= "9";
  }
  isAlpha(str) {
    if (str.length < 1)
      return false;
    const ch = str[0];
    return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch == "_";
  }
  isAlphaNum(str) {
    return this.isAlpha(str) || this.isDigit(str);
  }
  scanToken() {
    let c = this.advance();
    switch (c) {
      case "(":
        this.addToken(0 /* LPar */);
        break;
      case ")":
        this.addToken(1 /* RPar */);
        break;
      case ",":
        this.addToken(2 /* Comma */);
        break;
      case ".":
        this.addToken(3 /* Dot */);
        break;
      case "+":
        this.addToken(5 /* Plus */);
        break;
      case "-":
        this.addToken(4 /* Minus */);
        break;
      case "/":
        this.addToken(7 /* Slash */);
        break;
      case "*":
        this.addToken(6 /* Star */);
        break;
      case ";":
        this.addToken(8 /* Semi */);
        break;
      case "=":
        this.addToken(9 /* Equal */);
        break;
      case ":":
        this.addToken(13 /* Colon */);
        break;
      case " ":
      case "	":
      case "\r":
        break;
      case "$":
        break;
      case "'":
        this.scanString();
        break;
      default:
        if (this.isDigit(c)) {
          this.scanNumber();
        } else if (this.isAlphaNum(c)) {
          this.scanWord();
        } else {
          this.error = `unexpected character '${c}'`;
        }
    }
  }
  scanWord() {
    while (this.isAlphaNum(this.peek()))
      this.advance();
    this.addToken(10 /* Ident */);
  }
  scanNumber() {
    while (this.isDigit(this.peek()))
      this.advance();
    if (this.peek() == "." && this.isDigit(this.peekNext())) {
      this.advance();
      while (this.isDigit(this.peek()))
        this.advance();
    }
    this.addTokenX(11 /* Num */, parseFloat(this.source.substring(this.start, this.current)));
  }
  peekNext() {
    if (this.current + 1 >= this.source.length)
      return "\0";
    return this.source.charAt(this.current + 1);
  }
  scanString() {
    while (this.peek() != "'" && !this.isAtEnd()) {
      this.advance();
    }
    if (this.isAtEnd()) {
      this.error = "unterminated string";
      return;
    }
    this.advance();
    const value = this.source.substring(this.start + 1, this.current - 1);
    this.addTokenX(12 /* Str */, value);
  }
  advance() {
    return this.source.charAt(this.current++);
  }
  addToken(type) {
    this.addTokenX(type, null);
  }
  addTokenX(type, literal) {
    const text = this.source.substring(this.start, this.current);
    this.tokens.push(new Token(type, text, literal));
  }
  match(expected) {
    if (this.isAtEnd())
      return false;
    if (this.source.charAt(this.current) != expected)
      return false;
    this.current++;
    return true;
  }
  peek() {
    if (this.isAtEnd())
      return "\0";
    return this.source.charAt(this.current);
  }
  shouldSpace(index) {
    const next = parseInt(index) + 1;
    if (next >= this.tokens.length)
      return false;
    const t = this.tokens[next];
    return t.type == 11 /* Num */ || t.type == 10 /* Ident */ || t.type == 0 /* LPar */ || t.type == 4 /* Minus */;
  }
  render(el) {
    const pre = el.createEl("span");
    for (const i in this.tokens) {
      const t = this.tokens[i];
      if (this.error.length > 0) {
        el.createEl("div", { text: this.error, cls: "scan_error" });
      }
      if (t.type == 13 /* Colon */) {
        el.createEl("span", { text: ": ", cls: "punctuator" });
      } else if (t.type == 10 /* Ident */) {
        el.createEl("span", { text: t.lexeme, cls: "identifier" });
        if (this.shouldSpace(i))
          el.createEl("span", { text: " " });
      } else if (t.type == 11 /* Num */) {
        el.createEl("span", { text: t.lexeme, cls: "number" });
      } else if (t.type == 12 /* Str */) {
        el.createEl("span", { text: t.lexeme, cls: "string" });
      } else {
        el.createEl("span", { text: t.lexeme, cls: "punctuator" });
      }
    }
  }
};
var ParseNode = class {
  constructor(token, left, right) {
    this.token = token;
    this.left = left;
    this.right = right;
  }
};
var Parser = class {
  constructor(source) {
    this.current = 0;
    this.scanner = new Scanner(source);
    this.scanner.scanTokens();
  }
  match(start, ...types) {
    this.current = start;
    for (const t in types) {
      if (this.scanner.tokens[start].type == types[t]) {
        this.current++;
        return new ParseNode(start, null, null);
      }
    }
    this.current = start;
    return null;
  }
  primary(start) {
    this.current = start;
    let call = this.call(start);
    if (call)
      return call;
    let ident = this.match(start, 10 /* Ident */);
    if (ident) {
      const temp = this.current;
      const eq = this.match(this.current, 9 /* Equal */, 13 /* Colon */);
      if (eq) {
        eq.left = ident;
        eq.right = this.expression(this.current);
        return eq;
      }
      const nextId = this.match(this.current, 10 /* Ident */);
      if (nextId) {
        return this.primary(temp);
      }
      this.current = start;
    }
    let node = this.match(start, 11 /* Num */, 12 /* Str */, 10 /* Ident */);
    if (node)
      return node;
    if (this.match(this.current, 0 /* LPar */)) {
      node = this.expression(this.current);
      if (this.match(this.current, 1 /* RPar */)) {
        return node;
      }
      return null;
    }
    this.current = start;
    return null;
  }
  arguments(start) {
    const node = this.expression(start);
    if (!node)
      return null;
    const comma = this.match(this.current, 2 /* Comma */);
    if (comma) {
      comma.left = node;
      comma.right = this.arguments(this.current);
      return comma;
    }
    return node;
  }
  unary(start) {
    const node = this.match(start, 4 /* Minus */);
    if (node) {
      const expr = this.unary(this.current);
      if (expr) {
        node.left = expr;
        return node;
      }
    }
    return this.primary(start);
  }
  term_factor(start, method, type1, type2) {
    this.current = start;
    let left = method.apply(this, [start, type1, type2]);
    let op = null;
    if (!left) {
      this.current = start;
      return op;
    }
    op = this.match(this.current, type1, type2);
    if (!op) {
      return left;
    }
    while (op) {
      const un = method.apply(this, [this.current, type1, type2]);
      if (!un) {
        this.current = start;
        return null;
      }
      op.left = left;
      op.right = un;
      left = op;
      op = this.match(this.current, type1, type2);
    }
    return left;
  }
  factor(start) {
    return this.term_factor(start, this.unary, 6 /* Star */, 7 /* Slash */);
  }
  term(start) {
    return this.term_factor(start, this.factor, 5 /* Plus */, 4 /* Minus */);
  }
  call(start) {
    this.current = start;
    const id = this.match(start, 10 /* Ident */);
    if (id) {
      const lpar = this.match(this.current, 0 /* LPar */);
      if (lpar) {
        lpar.left = id;
        lpar.right = this.arguments(this.current);
        this.match(this.current, 1 /* RPar */);
        return lpar;
      }
    }
    this.current = start;
    return null;
  }
  statement(start) {
    return this.term(this.current);
  }
  expression(start) {
    return this.statement(start);
  }
};
var Calc = class {
  constructor(source, host) {
    this.parser = new Parser(source);
    this.host = host;
  }
  getToken(index) {
    return this.parser.scanner.tokens[index];
  }
  assign(node) {
    if (!node.left)
      return 0;
    const result = this.run(node.right);
    const token = this.getToken(node.left.token);
    this.host.setVar(token.lexeme, result);
    return result;
  }
  clamp(node) {
    let value = 0;
    let min = 0;
    let max = 0;
    if (node) {
      if (node.right) {
        value = this.run(node.right.left);
        if (node.right.right) {
          min = this.run(node.right.right.left);
          if (node.right.right.right) {
            max = this.run(node.right.right.right);
          }
        }
      }
    }
    return Math.min(Math.max(value, min), max);
  }
  call(node) {
    if (!node.left)
      return 0;
    const fname = this.parser.scanner.tokens[node.left.token].lexeme;
    switch (fname) {
      case "sin":
        return Math.sin(this.run(node.right));
      case "cos":
        return Math.cos(this.run(node.right));
      case "tan":
        return Math.tan(this.run(node.right));
      case "asin":
        return Math.asin(this.run(node.right));
      case "acos":
        return Math.acos(this.run(node.right));
      case "atan":
        return Math.atan(this.run(node.right));
      case "abs":
        return Math.abs(this.run(node.right));
      case "clamp":
        return this.clamp(node);
    }
  }
  run(node) {
    if (!node)
      return null;
    let token = this.parser.scanner.tokens[node.token];
    switch (token.type) {
      case 11 /* Num */:
        return token.literal;
      case 12 /* Str */:
        return token.literal;
      case 5 /* Plus */:
        return this.run(node.left) + this.run(node.right);
      case 4 /* Minus */:
        if (!node.right)
          return -this.run(node.left);
        return this.run(node.left) - this.run(node.right);
      case 6 /* Star */:
        return this.run(node.left) * this.run(node.right);
      case 7 /* Slash */:
        return this.run(node.left) / this.run(node.right);
      case 9 /* Equal */:
        return this.assign(node);
      case 13 /* Colon */:
        return this.run(node.right);
      case 10 /* Ident */:
        return this.host.getVar(this.getToken(node.token).lexeme);
      case 0 /* LPar */:
        return this.call(node);
      default:
        return null;
    }
  }
  exec() {
    return this.run(this.parser.expression(0));
  }
};
var Line = class {
  updatLineVar() {
    const name = `Line${this.row}`;
    this.host.setVar(name, this.result);
  }
  update(plus) {
    this.result += plus;
    this.updatLineVar();
  }
  resultString() {
    if (!this.result)
      return "0";
    return `${this.has$ ? "$" : ""}${this.host.format(this.result)}`;
  }
  selfRender(row) {
    var _a, _b;
    const line = row.createEl("td");
    line.createEl("span", { text: this.row > 0 ? this.row.toString() : "", cls: "line_number" });
    const source = row.createEl("td");
    if ((_b = (_a = this.calc) == null ? void 0 : _a.parser) == null ? void 0 : _b.scanner) {
      const pad = " ".repeat(this.indent * 4);
      source.createEl("span", { text: pad, cls: "line_number" });
      this.calc.parser.scanner.render(source);
    }
    const result = row.createEl("td");
    result.createEl("span", { text: this.resultString(), cls: "result" });
  }
  render(body) {
    if (this.parent) {
      const row = body.createEl("tr");
      this.selfRender(row);
      this.children.map((n) => n.render(body));
    } else {
      this.children.map((n) => n.render(body));
      const row = body.createEl("tr");
      this.selfRender(row);
    }
  }
  constructor(source, row, host) {
    this.host = host;
    this.source = source;
    this.indent = 0;
    this.children = new Array();
    this.parent = null;
    this.result = 0;
    this.has$ = false;
    this.row = row;
    if (source === "") {
      this.indent = -1;
      this.source = "Total";
      return;
    }
    for (let i = 0; i < source.length; i++) {
      if (source.charAt(i) == " ")
        this.indent = this.indent + 1;
      else
        break;
    }
    this.calc = new Calc(source, host);
    this.result = this.calc.exec();
    this.updatLineVar();
    return;
  }
};
var DEFAULT_SETTINGS = {
  format: true
};
var SigmaPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.variables = /* @__PURE__ */ new Map();
  }
  setVar(id, value) {
    this.variables.set(id, value);
  }
  getVar(id) {
    if (!this.variables.has(id))
      return 0;
    return this.variables.get(id);
  }
  format(value) {
    const str = value.toLocaleString();
    if (this.settings.format)
      return str;
    return str.replace(/,/g, "");
  }
  process(source) {
    this.variables.clear();
    let root = new Line("", 0, this);
    let currentNode = root;
    const lines = source.split("\n").filter((row) => row.length > 0);
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const node = new Line(line, i + 1, this);
      if (node.indent <= currentNode.indent) {
        let par = null;
        for (par = currentNode.parent; (par == null ? void 0 : par.indent) >= node.indent; par = par == null ? void 0 : par.parent)
          ;
        node.parent = par;
      } else {
        node.parent = currentNode;
      }
      node.parent.children.push(node);
      for (let par = node.parent; par; par = par.parent) {
        par.update(node.result);
      }
      if (node.parent)
        node.parent.has$ = node.has$;
      currentNode = node;
    }
    return root;
  }
  async onload() {
    await this.loadSettings();
    this.registerMarkdownCodeBlockProcessor("sigma", (source, el, ctx) => {
      const root = this.process(source);
      const table = el.createEl("table");
      const body = table.createEl("tbody");
      if (root.children.length === 1)
        root.children[0].render(body);
      else
        root.render(body);
    });
    this.addSettingTab(new SigmaSettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SigmaSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Sigma Settings" });
    new import_obsidian.Setting(containerEl).setName("Format result").setDesc("Show comma separators for results").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.format).onChange(async (value) => {
        this.plugin.settings.format = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
